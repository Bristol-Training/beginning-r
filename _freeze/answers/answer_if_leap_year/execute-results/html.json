{
  "hash": "68ad67afdb416507a561e787312ab42c",
  "result": {
    "engine": "knitr",
    "markdown": "Whenever solving a problem like this, it's always good to build it up one step at a time. You could be tempted to jump right to the solution but it is easier to take small steps and check your results along the way than *debugging* a long piece of code.\n\n\n\n#### Divisible by 4\n\nThe first step is to implement the simplest of the logical checks: is the year divisible by 4? If it is, print out an appropriate message checking that it works for a know leap year.\n\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2024\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\nFor a year that we know is not a leap year, what do we get:\n\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2023\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n}\n```\n:::\n\n\n\n\n\n\nWe get no output, so let's fix that next, by adding an `else`:\n\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2024\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2023\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2023 is not a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\nSo far it's looking like it's doing the right thing. We have a working leap year calculator which covers most cases correctly.\n\n#### Divisible by 100\n\nLet's check the next corner case: what happens if the year is divisible by 100. The rules say that this should not be a leap year:\n\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 1900\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1900 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n\nSo it's currently getting this wrong. We need to add in a check to see if the year is divisible by 100 and set it to be labelled as not a leap year.\n\nHere we need to be careful as any number which is divisible by 100 is also divisible by 4 but we want a special thing to happen in the former case. The divisible-by-100 check is more specific than the divisible-by$4$ check, so it must come first in the `if`-`else if`-`else` chain:\n\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2024\n\nif (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n*(omitting repeated code)*\n\n\n\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n2023 is not a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n1900 is not a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### Divisible by 400\n\nThe code is working for all those cases correctly, however, the last condition to think about is what happens for the year 2000:\n\n\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2000\n\nif (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2000 is not a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThis year should be a leap year as it is divisible by 400. Again this is more specific than the previous two so must be added before them in the chain:\n\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2024\n\nif (year %% 400 == 0) {\n    cat(year, \"is a leap year\")\n} else if (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n\n*(omitting repeated code)*\n\n\n\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n2023 is not a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n1900 is not a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n2000 is a leap year\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}