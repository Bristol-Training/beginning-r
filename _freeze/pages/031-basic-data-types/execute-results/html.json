{
  "hash": "91c9666c034a8018ee1a5c110c184a96",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Basic data types\n---\n\n\n\n\n\nIn R we have several built-in basic data types. The most common types of data that you will find are numbers, characters and booleans.\n\n::: {#keypoints2 .callout-tip icon=false title='Key points'}\n- R is dynamically typed, meaning you don't need to declare the type of a variable explicitly.\n- You can use the `class()` function to check the data type of a variable.\n- Data types determine what operations can be performed on the data.\n- You can convert between different data types using built-in functions like `as.integer()`, `as.numeric()` and `as.character()`\n:::\n\n### Numeric Types\n\nDescription                | Type     | Example \n---------------------------|----------|----------------\nintegers or whole numbers  | integer  | `a <- as.integer(12)`\nfloating-point numbers     | numeric  | `b <- as.numeric(7.3)`\ncomplex numbers            | complex  | `c <- as.complex(2i + 7)`\n\n\n```{.r}\na <- 12L\nb <- 7.3\nc <- 2i + 7\n\ncat(\"A:\", a, class(a))\ncat(\"B:\", b, class(b))\ncat(\"C:\", c, class(c))\n```\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nA: 12 integer\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nB: 7.3 numeric\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC: 7+2i complex\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Text Types\n\nDescription                       | Type       | Example \n----------------------------------|------------|----------------\ntextual data (strings)            | character  | `a <- \"Jean Golding\"`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Jean Golding\"\ncat(\"Name:\", name, class(name))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nName: Jean Golding character\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {#keypoint1 .callout-tip icon=false title=\"Note that\"}\nItâ€™s important that when writing numbers in your scripts, you do not put quotation marks around them, otherwise they will be recognized by the R interpreter as strings. There is a difference between 3.14159 and \"3.14159\", the first is a number and the second is just a string of characters.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi <- 3.14159\ncat(\"pi:\", pi, class(pi))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npi: 3.14159 numeric\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npi <- \"3.14159\"\ncat(\"pi:\", pi, class(pi))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npi: 3.14159 character\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n### Boolean Types\n\nDescription                       | Type     | Example \n----------------------------------|----------|----------------\nboolean values (True or False)    | boolean  | `a <- TRUE`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 23\nb <- 2\nc <- a != b\n\ncat(\"C:\", c, class(c))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC: TRUE logical\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n::: {#exercise-1 .callout-note title=\"Exercise\" icon=false} \n\nWithout using R, can you tell what is the data type of these variables?\n```{.r}\nx <- 32\nnumber_of_participants <- \"1017\"\nFriday <- TRUE\ny <- 1L\na <- 10<8\n```\n:::\n\n::: {#answer .callout-caution icon=false title='Answer' collapse=\"true\"}\n`x` is a numeric (float)\n\n`number_of_participants` is a string\n\n`Friday` is a boolean\n\n`y` is an integer \n\n`a` is a boolean\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}