{
  "hash": "9a83910965105a0de61cf59cb60ec145",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Operators\n---\n\n\n\n\n\nOperators are essential for performing various operations on variables and values. You may want to multiply two numbers or compare them to know which one is greater, and operators allow us to do it.\n\n### Arithmetic Operators\n\nArithmetic operators can be used with numerical variables such as `int` and `float`.\n\nDescription                 | Operator | Example \n----------------------------|----------|----------------\nAddition                    | +        | a + b\nSubtraction                 | -        | a - b\nMultiplication              | *        | a * b\nDivision                    | /        | a / b\nFloor Division              | %/%      | a %/% b\nModulo                      | %%       | a %% b\nExponentiation              | ^        | a ^ b\n\n```{.r}\na <- 9\nb <- 2\n\ncat('Subtraction:', a - b)\ncat('Division:', a / b)\ncat('Floor Division:', a %/% b)\ncat('Modulo:', a %% b)\ncat('Power:', a ^ b)\n```\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nSubtraction: 7\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDivision: 4.5\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFloor Division: 4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nModulo: 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPower: 81\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Comparison Operators\n\nWe can compare two variables (or a variable and a value) using comparison operators. They are applicable to numerical variables, strings and booleans.\n\nDescription                 | Operator | Example \n----------------------------|----------|----------------\nEqual To                    | ==       | a == b\nNot Equal To                | !=       | a != b\nGreater Than                | >        | a > b\nLess Than                   | <        | a < b\nGreater Than or Equal To    | >=       | a >= b\nLess Than or Equal To       | <=       | a <= b\n\n```{.r}\na <- 5\nb <- 2\n\ncat(\"Equal To:\", a == b)\ncat(\"Less Than:\", a > b)\ncat(\"Not Equal To:\", a != b)\ncat(\"Greater Than:\", a < b)\n```\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nEqual To: FALSE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLess Than: TRUE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNot Equal To: TRUE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGreater Than: FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Logical Operators\n\nLogical operators are used to combine conditional statements or negate them, and can only be applied to booleans.\n\nDescription                 | Operator | Example \n----------------------------|----------|----------------\nLogical AND (element-wise)  | &        | (a == b) & (a > c)\nLogical AND                 | &&       | (a == b) && (a > c)\nLogical OR (element-wise)   | \\|        | (a > b) \\| (a < c)\nLogical OR                  | \\|\\|       | (a > b) \\|\\| (a < c)\nLogical NOT                 | !        | !(a > b)\n\n```{.r}\na <- 5\nb <- 2\nc <- 4\n\ncat(\"(a==b) AND (a>c)\", (a==b) & (a>c))\ncat(\"(a>b) OR (a<c)\", (a>b) | (a<c))\ncat(\"NOT (a>b):\", !(a>b))\n```\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n(a==b) AND (a>c): FALSE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(a>b) OR (a<c): TRUE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNOT (a>b): FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {#exercise .callout-note title=\"Exercise\" icon=false} \n\nDefine two strings `str1 <- \"Tuesday\"` and `str2 <- \"Wednesday\"`, and compare them (e.g. equal, greater and less than).\n\n:::\n\n::: {#answer .callout-caution icon=false title='Answer' collapse=\"true\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr1 <- \"Tuesday\"\nstr2 <- \"Wednesday\"\n\ncat(str1,\"equal to\",str2,\":\",str1==str2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTuesday equal to Wednesday : FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(str1,\"greater than\",str2,\":\",str1>str2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTuesday greater than Wednesday : FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(str1,\"less than\",str2,\":\",str1<str2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTuesday less than Wednesday : TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\nIt is easy undersand that the operator `==` returns `TRUE` if two strings are the same. But what do `>` and `<`? \n\nR doesn't understand the meaning of works \"Tuesday\" and \"Wednesday\", they are just two chains of characters. The operator `>` will return `TRUE` if the string `str1` comes after alphabetically than `str2`, and `<` will return `TRUE` if the string `str1` comes before alphabetically than `str2`. These operations are case-sensitive.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}