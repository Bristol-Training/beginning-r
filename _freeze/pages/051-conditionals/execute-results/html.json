{
  "hash": "80e075399697f2db97123b022f43465c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Conditional if\n---\n\n\n\n\n\nConditional `if` statements allow programs to make decisions and execute different code based on whether certain conditions are `TRUE` or `FALSE`. For instance, we may want to perform a different action when a study participant is an adult or not:\n\n```\nIF (participant_age >= 18)\n    DO SOMETHING\nOTHERWISE\n    DO SOMETHING ELSE\n```\n\nThe basic syntax for conditional statements is `if (condition) {}`, where `condition` is an expression that evaluates to either `TRUE` or `FALSE`, i.e. a boolean. If it's `TRUE`, the indented code block under the if statement will run. If `FALSE`, it will be skipped. For example, the below code will print \"You are an adult\" if age is 18 or higher.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- 18\nif (age >= 18) {\n    cat(\"You are an adult\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nYou are an adult\n```\n\n\n:::\n:::\n\n\n\n\n\nYou can also add an `else` clause to specify code to run if the condition is `FALSE`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- 17\nif (age >= 18) {\n    cat(\"You are an adult\")\n} else {\n    cat(\"You are not an adult\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nYou are not an adult\n```\n\n\n:::\n:::\n\n\n\n\n\nFor multiple conditions, you can use `else if` clauses to execute the first matching block.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- 14\nif (age < 13) {\n    cat(\"You are a child\") \n} else if (age < 18) {\n    cat(\"You are a teenager\")\n} else {\n    cat(\"You are an adult\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nYou are a teenager\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: {#keypoints .callout-tip icon=false title='`if` statement syntax'}\n\nAn `if` statement has scaffolding as well as user-supplied parts. The scafolding is the word `if`, the parentheses `()` and the curly braces `{}` as shown below.\n\n<pre>\n<b style=\"color:darkred\">if  (</b>my_number > 100<b style=\"color:darkred\">)  {</b>\n    cat(my_number, \"is large\")\n<b style=\"color:darkred\">}</b>\n</pre>\n\nThe user-supplied part is the conditional:\n\n<pre>\nif (<b style=\"color:darkred\">my_number > 100</b>) {\n    cat(my_number, \"is large\")\n}\n</pre>\n\nFor readability, it is recommended to ident the body.\n\nYou can chain multiple conditions with `else if` using the same syntax. On the contrary, `else` provides a default case if no conditions are `TRUE` and do not requiere a condition.\n\n:::\n\n\n\n\n::: {#exercise2 .callout-note title=\"Exercise\" icon=false} \n\nTo explore the behaviour of the `if` statement, we could edit the below `if.R` to use some different logical statements. Make sure you remember to save the file after each change.\n\n```{.r filename=\"if.R\"}\nmy_number <- 99\n\nif (my_number > 100) {\n    cat(my_number, \"is large\")\n}\n```\n\n:::\n::: {#answer2 .callout-caution icon=false title='Answer' collapse=\"true\"}\n\n\n**Less than:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 74\n\nif (my_number < 100) {\n    cat(my_number, \"is less than 100\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n74 is less than 100\n```\n\n\n:::\n:::\n\n\n\n\n<br/>\n\n**Equal to:**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 74\n\nif (my_number == 100) {\n    cat(my_number, \"== 100\") }\nif (my_number == 74) {\n    cat(my_number, \"== 74\") }\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n74 == 74\n```\n\n\n:::\n:::\n\n\n\n\n<br/>\n\n**Not equal to:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 74\n\nif (my_number != 100) {\n    cat(my_number, \"!= 100\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n74 != 100\n```\n\n\n:::\n\n```{.r .cell-code}\nif (my_number != 74) {\n    cat(my_number, \"!= 74\")\n}\n```\n:::\n\n\n\n\n\n\n:::\n\n\n## Ordering your options\n\nWhen working out which lines of code will be run, R will work down the list of `if`, `else if` and `else` and will run the *first one* that matches. Once it's matched one, it will not bother checking to see if any of those later on would have matched. This means that you should order your questions from most-specific to least-specific.\n\nFor example, if you want to do one thing for positive numbers, but something special instead for numbers greater than 100, then you should put the more specific check first:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 73\n\nif (my_number > 100) {\n    cat(my_number, \"is large\")\n} else if ( my_number > 1) {\n    cat(my_number, \"is positive\")\n} else {\n    cat(my_number, \"negative\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n73 is positive\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n::: {#exercise3 .callout-note title=\"Exercise\" icon=false} \n\nCreate a file `leap_year.R` which calculates, for a given year, whether it is a leap year and prints out the answer. You might want to read the year in using `input`, or you could hard-code it in the program.\n\nThe rules to follow are:\n\n1. if the year is divisible by 400 then it's a leap year,\n2. otherwise, if the year is divisible by 100 then it's not,\n3. otherwise, if the year is divisible by 4 then it's a leap year,\n4. otherwise, it's not.\n\nTo simplify the writing of the program, you might find it easier to start with the divisible-by-4 condition, then add in the divisible-by-100 check and then add in the divisible-by-400 calculation.\n\nFor reference, here are some years for you to check against:\n\n- 2023 - not a leap year as it's not divisible by 4\n- 2024 - a leap year as it's divisible by 4 (and not by 100)\n- 1900 - not a leap year as it's divisible by 100 (and not by 400)\n- 2000 - a leap year as it's divisible by 400\n\n:::\n\n::: {#answer3 .callout-caution icon=false title='Answer' collapse=\"true\"}\n\nWhenever solving a problem like this, it's always good to build it up one step at a time. You could be tempted to jump right to the solution but it is easier to take small steps and check your results along the way than *debugging* a long piece of code.\n\n\n\n#### Divisible by 4\n\nThe first step is to implement the simplest of the logical checks: is the year divisible by 4? If it is, print out an appropriate message checking that it works for a know leap year.\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2024\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\nFor a year that we know is not a leap year, what do we get:\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2023\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n}\n```\n:::\n\n\n\n\n\nWe get no output, so let's fix that next, by adding an `else`:\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2024\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2023\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2023 is not a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nSo far it's looking like it's doing the right thing. We have a working leap year calculator which covers most cases correctly.\n\n#### Divisible by 100\n\nLet's check the next corner case: what happens if the year is divisible by 100. The rules say that this should not be a leap year:\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 1900\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1900 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\nSo it's currently getting this wrong. We need to add in a check to see if the year is divisible by 100 and set it to be labelled as not a leap year.\n\nHere we need to be careful as any number which is divisible by 100 is also divisible by 4 but we want a special thing to happen in the former case. The divisible-by-100 check is more specific than the divisible-by$4$ check, so it must come first in the `if`-`else if`-`else` chain:\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2024\n\nif (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n*(omitting repeated code)*\n\n\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n2023 is not a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n1900 is not a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Divisible by 400\n\nThe code is working for all those cases correctly, however, the last condition to think about is what happens for the year 2000:\n\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2000\n\nif (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2000 is not a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\nThis year should be a leap year as it is divisible by 400. Again this is more specific than the previous two so must be added before them in the chain:\n\n\n\n\n::: {.cell filename='leap_year.r'}\n\n```{.r .cell-code}\nyear <- 2024\n\nif (year %% 400 == 0) {\n    cat(year, \"is a leap year\")\n} else if (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n*(omitting repeated code)*\n\n\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n2023 is not a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n1900 is not a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.r'}\n::: {.cell-output .cell-output-stdout}\n\n```\n2000 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n:::\n\n\n\n## Combining questions\n\nIt is possible to ask two or more questions in one go by combining them with `and` and `or`. So, if you want to check is a number is smaller than ten (`my_number < 10`) and is not equal to zero (`my_number != 0`), you can use:\n\n```{.R}\nif ( my_number<10 & my_number!=0 ) :\n    ...\n```\n\nThese combined checks can be used is both `if` and `else if` statements.\n\n\n::: {#exercise4 .callout-note title=\"Exercise\" icon=false} \nCould you figure out how to rewrite `leap_year.R` with a single `if`-`else` statement?\n:::\n\n::: {#answer4 .callout-caution icon=false title='Answer' collapse=\"true\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear <- 2024\n\nif ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2024 is a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.R'}\n\n```{.r .cell-code}\nyear <- 2023\n\nif ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2023 is not a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.R'}\n\n```{.r .cell-code}\nyear <- 1900\n\nif ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1900 is not a leap year\n```\n\n\n:::\n:::\n\n::: {.cell filename='leap_year.R'}\n\n```{.r .cell-code}\nyear <- 2000\n\nif ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2000 is a leap year\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}