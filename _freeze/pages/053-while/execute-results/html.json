{
  "hash": "71dd99156b62283dc2f377c8e409e527",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: While loop\n---\n\n\n\n\n\nWe have seen that `for` loops can repeatedly execute a block of code for each element specified. We can think of another scenario where we only want to continue executing a block of code as long as a given condition is `TRUE`. The basic idea is:\n```\n    WHILE there is money in my account\n        have lunch out\n        update my bank statement\n```\n\n\nIn `while` loops the condition is checked at the beginning of each iteration and the loop continues executing as long as the condition is `TRUE`. The basic syntax in R which has a similar scaffolding to an `if` clause:\n```{.R}\nwhile (condition) {\n    # code to execute while condition is True\n}\n```\n\n\nTo ensure that the condition will eventually become `FALSE`, it is common usage to increment/decrement a counter variable in the loop body:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount <- 0\nwhile ( count < 5 ) {\n    cat(count, \" \")\n    count <- count + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0  1  2  3  4  \n```\n\n\n:::\n:::\n\n\n\n\n\nThere are some extra flow control instructions in `while` loops that we are not going to see here in detail but it is important to mention them. They are:\n\n- `break`: exits the loop immediately\n- `next`: skips the rest of the current iteration and moves to the next\n\n```{.R}\nwhile (TRUE) {\n    user_input <- readline(\"Enter 'q' to quit: \")\n    if (user_input == 'q') {\n        break\n    }\n}\n```\n\n::: {#exercise1 .callout-note title=\"Exercise\" icon=false} \nGiven a list of students **sorted** by name\n\n```{.R}\nstudents <- c(\"Alice\", \"Bob\", \"Charlie\", \"Frank\", \"George\", \"Hannah\", \"Julia\", \"Mia\", \"Noah\", \"Olivia\")\n```\n\ncreate a script `while.R` that prints the names of students starting with letters before 'M' in the alphabet. \n:::\n\n::: {#answer1 .callout-caution icon=false title='Answer' collapse=\"true\"}\n\nNote in the below script that the `while` loop needs to take into account two different conditions:\n\n- That the student's name starts with a letter before 'M'\n- That we don't try to index an element out of range in `students`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- c(\"Alice\", \"Bob\", \"Charlie\", \"Frank\", \"George\", \"Hannah\", \"Julia\", \"Mia\", \"Noah\", \"Olivia\")\n\n# Initialize the index\ni <- 1\n\n# While loop to print names before 'M'\nwhile (i<length(students) & students[i]<\"M\") {\n    cat(students[i], \" \")\n    i <- i + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAlice  Bob  Charlie  Frank  George  Hannah  Julia  \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}