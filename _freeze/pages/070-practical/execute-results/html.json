{
  "hash": "1ef32af449f27055ff94b59a1127d0af",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Worksheet\n\n---\n\n\n\n\n\n\nThis page contains a number of exercises to give you a chance to practise what you have learned this session. You should create a new `.R` R file for each of them.\n\n\n::: {#exercise1 .callout-note title=\"Exercise 1\" icon=false} \n\nCreate a list containing 5 different animal types, for example:\n\n- cat\n- dog\n- elephant\n- minnow\n- beaver\n\nPrint out the list to the screen.\n\n:::\n\n::: {#answer .callout-caution icon=false title='Answer' collapse=\"true\"}\n\n\n\n\n::: {.cell filename='exercise1.r'}\n\n```{.r .cell-code}\nanimal_list <- c(\"cat\", \"dog\", \"elephant\", \"minnow\", \"beaver\")\n\ncat(animal_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncat dog elephant minnow beaver\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n::: {#exercise2 .callout-note title=\"Exercise 2\" icon=false} \n\nStart by copying the code that you used to create the list of animals in the last exercise. Write a loop which will print out each of the animals, prefixed with `Species: `. For example the output could look like:\n```\nSpecies: cat\nSpecies: dog\nSpecies: elephant\nSpecies: minnow\nSpecies: beaver\n```\n:::\n\n::: {#answer .callout-caution icon=false title='Answer' collapse=\"true\"}\n\n\n\n\n::: {.cell filename='exercise2.r'}\n\n```{.r .cell-code}\nanimal_list <- c(\"cat\", \"dog\", \"elephant\", \"minnow\", \"beaver\")\n\nfor (animal in animal_list) {\n    cat(\"Species:\", animal, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpecies: cat \nSpecies: dog \nSpecies: elephant \nSpecies: minnow \nSpecies: beaver \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {#exercise3 .callout-note title=\"Exercise 3\" icon=false} \n\nCreate a list containing 10 different numbers, ranging from 0 to 100. For example: 65, 54, 17, 78, 66, 24, 32, 80, 79, 95.\n\nWrite a loop which will print out only those numbers which are larger than 50.\n:::\n\n::: {#answer .callout-caution icon=false title='Answer' collapse=\"true\"}\n\n\n\n\n::: {.cell filename='exercise3.r'}\n\n```{.r .cell-code}\nmy_numbers <- c(65, 54, 17, 78, 66, 24, 32, 80, 79, 95)\n\nfor (num in my_numbers) {\n    if (num > 50) {\n        cat(num,\"\")\n    }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n65 54 78 66 80 79 95 \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n::: {#exercise4 .callout-note title=\"Exercise 4\" icon=false} \n\nCreate a loop which iterates over the numbers from 1 to 20 (inclusive). Inside the loop:\n- if the number is divisible by three then print \"ook\",\n- if the number is divisible by both three and five then print \"foo\",\n- and if the number is not divisible by either then just print the number.\n\n*Hint: You can use the `%` operator to find the remainder from a division. Also, take care in the order that you do your `if`-`else`.*\n\n:::\n\n::: {#answer .callout-caution icon=false title='Answer' collapse=\"true\"}\n\nWhen creating a chain of `if`-`else if`-`else`, you should put the most specific checks first. Otherwise they will be swamped by the more general checks.\n\n\n\n\n\n::: {.cell filename='exercise4.r'}\n\n```{.r .cell-code}\nfor (i in 1:21) {\n    if ((i%%3)==0 & (i%%5)==0) {\n        cat(\"foo\", \"\")\n    } else if ((i%%3)==0) {\n        cat(\"ook\", \"\")\n    } else {\n        cat(i, \"\")\n    }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1 2 ook 4 5 ook 7 8 ook 10 11 ook 13 14 foo 16 17 ook 19 20 ook \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n<!--\n::: {#exercise5 .callout-note title=\"Exercise 5\" icon=false} \n\nLet's end this session with a more difficult challenge. We're going to make a calculator which can read numerical operations from the input and print the answers to the screen.\n\nFor example, it should print out an input prompt like\n\n```\n>\n```\n\ninto which you can type a calculation as\n\n```\n> 4 * 6\n```\n\nand it should then print out the answer like\n\n```\n> 4 * 6\n4 * 6 is 24\n```\n\nExamples of inputs it should be able to accept are:\n\n```\n4 * 6\n5 + 6\n457 - 75\n54 / 3\n4 + 6\n```\n\nNotice that all the input strings have spaces around the operator, this will make your life much easier if you assume this.\n\nOne extra function you will need to do this is [the `split` function](https://#) which takes a string and returns a list containing the string, split by spaces. Also, remember the `int` function which can convert a string into an integer.\n\n- The examples only have integers in them, can you adjust your program so that it can accept floating point numbers as well?\n- Can you adapt your program so that it can support code with or without spaces either side of the operator? This is a more challenging exercise so feel free to ask for some some help and be sure to show one of the instructors your answer once you've got it working.\n\n:::\n\n::: {#answer .callout-caution icon=false title='Answer' collapse=\"true\"}\n\n`calc.R` could look like:\n\n```{.r}\n#| filename: calc.r\n#| eval: false\n\ncalculation <- input(\"> \")\n\nparts <- calculation.split()  # Split e.g. \"4 * 6\" into [\"4\", \"*\", \"6\"]\nlhs <- int(parts[0])  # Extract e.g. \"4\" and turn it into 4\noperation <- parts[1]  # Extract e.g. \"*\"\nrhs <- int(parts[2])  # Extract e.g. \"6\" and turn it into 6\n\nif operation == \"+\":\n    cat(calculation, \"is\", lhs + rhs)\n} else if ( operation == \"-\":\n    cat(calculation, \"is\", lhs - rhs)\n} else if ( operation == \"*\":\n    cat(calculation, \"is\", lhs * rhs)\n} else if ( operation == \"/\":\n    cat(calculation, \"is\", lhs / rhs)\n```\n\n```{.r}\n#| echo: false\n\ndef calculator(calculation):\n    cat(\"> \" + calculation)\n    parts <- calculation.split()  # Split e.g. \"4 * 6\" into [\"4\", \"*\", \"6\"]\n    lhs <- int(parts[0])  # Extract e.g. \"4\" and turn it into 4\n    operation <- parts[1]  # Extract e.g. \"*\"\n    rhs <- int(parts[2])  # Extract e.g. \"6\" and turn it into 6\n\n    if operation == \"+\":\n        cat(calculation, \"is\", lhs + rhs)\n    } else if ( operation == \"-\":\n        cat(calculation, \"is\", lhs - rhs)\n    } else if ( operation == \"*\":\n        cat(calculation, \"is\", lhs * rhs)\n    } else if ( operation == \"/\":\n        cat(calculation, \"is\", lhs / rhs)\n```\n\n\n\n```{.bash filename=\"Terminal/Command Prompt\"}\nR calc.r\n```\n```{.r}\n#| echo: false\ncalculation <- \"4 * 6\"\ncalculator(calculation)\n```\n\n\n```{.r}\n#| echo: false\ncalculation <- \"5 + 6\"\ncalculator(calculation)\n```\n\n\n```{.r}\n#| echo: false\n\ncalculation <- \"457 - 75\"\ncalculator(calculation)\n```\n\n\n\n```{.r}\n#| echo: false\ncalculation <- \"54 / 3\"\ncalculator(calculation)\n```\n\n\n\nThe code above works fine, but there's always more than one way to approach a problem like this.\n\n#### Separating calculation from output\n\nOne thing that we could improve would be the repetition in the `print` lines. Each of them are almost the same as each other and if we wanted to change the output from\n\n```\n4 * 6 is 24\n```\nto something like\n```\n4 * 6 <- 24\n```\nthen we'd have to edit all four lines of code.\n\nRemembering our three-part pattern from earlier in the course of input→calculation→output, it's a good idea to split out the calculation of data from the printing and display of data. In our case  we could change it to look like:\n\n\n```{.r}\n#| filename: calc.r\n#| eval: false\n\ncalculation <- input(\"> \")\n\n# Prepare the parts\nparts <- calculation.split()\nlhs <- int(parts[0])\noperation <- parts[1]\nrhs <- int(parts[2])\n\n# Calculate the answer\nif operation == \"+\":\n    result <- lhs + rhs\n} else if ( operation == \"-\":\n    result <- lhs - rhs\n} else if ( operation == \"*\":\n    result <- lhs * rhs\n} else if ( operation == \"/\":\n    result <- lhs / rhs\n\n# Output the result\ncat(calculation, \"is\", result)\n```\n\n\n```{.r}\n#| filename: calc.r\n#| echo: false\n\ndef calculator(calculation):\n\n    cat(\"> \" + calculation)\n    # Prepare the parts\n    parts <- calculation.split()\n    lhs <- int(parts[0])\n    operation <- parts[1]\n    rhs <- int(parts[2])\n\n    # Calculate the answer\n    if operation == \"+\":\n        result <- lhs + rhs\n    } else if ( operation == \"-\":\n        result <- lhs - rhs\n    } else if ( operation == \"*\":\n        result <- lhs * rhs\n    } else if ( operation == \"/\":\n        result <- lhs / rhs\n\n    # Output the result\n    cat(calculation, \"is\", result)\n```\n\n```{.bash filename=\"Terminal/Command Prompt\"}\nR calc.r\n```\n\n```{.r}\n#| echo: false\ncalculation <- \"4 * 6\"\ncalculator(calculation)\n```\n\n\n```{.r}\n#| echo: false\ncalculation <- \"5 + 6\"\ncalculator(calculation)\n```\n\n\n```{.r}\n#| echo: false\n\ncalculation <- \"457 - 75\"\ncalculator(calculation)\n```\n\n\n```{.r}\n#| echo: false\ncalculation <- \"54 / 3\"\ncalculator(calculation)\n```\n\n\n\n:::\n-->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}