---
title: Conditional if
---

Conditional `if` statements allow programs to make decisions and execute different code based on whether certain conditions are `TRUE` or `FALSE`. For instance, we may want to perform a different action when a study participant is an adult or not:

```
IF (participant_age >= 18)
    DO SOMETHING
OTHERWISE
    DO SOMETHING ELSE
```

The basic syntax for conditional statements is `if (condition) {}`, where `condition` is an expression that evaluates to either `TRUE` or `FALSE`, i.e. a boolean. If it's `TRUE`, the indented code block under the if statement will run. If `FALSE`, it will be skipped. For example, the below code will print "You are an adult" if age is 18 or higher.
```{r}
age <- 18
if (age >= 18) {
    cat("You are an adult")
}
```

You can also add an `else` clause to specify code to run if the condition is `FALSE`:

```{r}
age <- 17
if (age >= 18) {
    cat("You are an adult")
} else {
    cat("You are not an adult")
}
```

For multiple conditions, you can use `else if` clauses to execute the first matching block.

```{r}
age <- 14
if (age < 13) {
    cat("You are a child") 
} else if (age < 18) {
    cat("You are a teenager")
} else {
    cat("You are an adult")
}
```


::: {#keypoints .callout-tip icon=false title='`if` statement syntax'}

An `if` statement has scaffolding as well as user-supplied parts. The scafolding is the word `if`, the parentheses `()` and the curly braces `{}` as shown below.

<pre>
<b style="color:darkred">if  (</b>my_number > 100<b style="color:darkred">)  {</b>
    cat(my_number, "is large")
<b style="color:darkred">}</b>
</pre>

The user-supplied part is the conditional:

<pre>
if (<b style="color:darkred">my_number > 100</b>) {
    cat(my_number, "is large")
}
</pre>

For readability, it is recommended to ident the body.

You can chain multiple conditions with `else if` using the same syntax. On the contrary, `else` provides a default case if no conditions are `TRUE` and do not requiere a condition.

:::




::: {#exercise2 .callout-note title="Exercise" icon=false} 

To explore the behaviour of the `if` statement, we could edit the below `if.R` to use some different logical statements. Make sure you remember to save the file after each change.

```{.r filename="if.R"}
my_number <- 99

if (my_number > 100) {
    cat(my_number, "is large")
}
```

:::
::: {#answer2 .callout-caution icon=false title='Answer' collapse="true"}
{{< include ../answers/ranswer_more_conditionals.qmd >}}
:::


## Ordering your options

When working out which lines of code will be run, R will work down the list of `if`, `else if` and `else` and will run the *first one* that matches. Once it's matched one, it will not bother checking to see if any of those later on would have matched. This means that you should order your questions from most-specific to least-specific.

For example, if you want to do one thing for positive numbers, but something special instead for numbers greater than 100, then you should put the more specific check first:

```{r}
my_number <- 73

if (my_number > 100) {
    cat(my_number, "is large")
} else if ( my_number > 1) {
    cat(my_number, "is positive")
} else {
    cat(my_number, "negative")
}
```



::: {#exercise3 .callout-note title="Exercise" icon=false} 

Create a file `leap_year.R` which calculates, for a given year, whether it is a leap year and prints out the answer. You might want to read the year in using `input`, or you could hard-code it in the program.

The rules to follow are:

1. if the year is divisible by 400 then it's a leap year,
2. otherwise, if the year is divisible by 100 then it's not,
3. otherwise, if the year is divisible by 4 then it's a leap year,
4. otherwise, it's not.

To simplify the writing of the program, you might find it easier to start with the divisible-by-4 condition, then add in the divisible-by-100 check and then add in the divisible-by-400 calculation.

For reference, here are some years for you to check against:

- 2023 - not a leap year as it's not divisible by 4
- 2024 - a leap year as it's divisible by 4 (and not by 100)
- 1900 - not a leap year as it's divisible by 100 (and not by 400)
- 2000 - a leap year as it's divisible by 400

:::

::: {#answer3 .callout-caution icon=false title='Answer' collapse="true"}
{{< include ../answers/answer_if_leap_year.qmd >}}
:::



## Combining questions

It is possible to ask two or more questions in one go by combining them with `and` and `or`. So, if you want to check is a number is smaller than ten (`my_number < 10`) and is not equal to zero (`my_number != 0`), you can use:

```{.R}
if ( my_number<10 & my_number!=0 ) :
    ...
```

These combined checks can be used is both `if` and `else if` statements.


::: {#exercise4 .callout-note title="Exercise" icon=false} 
Could you figure out how to rewrite `leap_year.R` with a single `if`-`else` statement?
:::

::: {#answer4 .callout-caution icon=false title='Answer' collapse="true"}
```{r}
year <- 2024

if ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {
    cat(year, "is a leap year")
} else {
    cat(year, "is not a leap year")
}
```

```{r filename="leap_year.R"}
year <- 2023

if ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {
    cat(year, "is a leap year")
} else {
    cat(year, "is not a leap year")
}
```

```{r filename="leap_year.R"}
year <- 1900

if ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {
    cat(year, "is a leap year")
} else {
    cat(year, "is not a leap year")
}
```

```{r filename="leap_year.R"}
year <- 2000

if ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {
    cat(year, "is a leap year")
} else {
    cat(year, "is not a leap year")
}
```

:::



