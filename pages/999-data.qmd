---
title: Getting data into your script
---




## Getting data into your script

So far, all the code we've run is somewhat static. Variables get assinged a value in the script and very time we run it, the output is always be the same. We will see a lot more of this throughout this workshop, but for now we will introduce one more function that R provides, [`readline`](https://rdrr.io/r/base/readline.html).

The `cat` function is how we get information *out* of our program, and the `readline` function is a way of getting data *into* it. The function will pause the program and wait for you to type something in followed by *Enter*, and assign your input to a variable on the left hand side of the `<-`.

```{.R filename="colour.R"}
fav <- readline("What is your favourite colour?")
cat("My favourite colour is", fav)
```

Now, if we run this script, it will print the message specified and wait for you to type something. If you type "red" and then press enter, it will assign "red" to the variable `fav` and then use that variable in the final `cat` function:

```{.bash filename="Terminal/Command Prompt"}
R colour.R
```

```{.r}
#| echo: false
cat("What is your favourite colour? red")

fav <- 'red'

cat("My favourite colour is", fav)
```


::: {#exercise .callout-note title="Exercise" icon=false} 

Create a script `myname.R` so the value a the variable `name` is set using the `input` function. Be sure to set a prompt as well so that the user know that they should type something.

The script should, when run with `R3 myname.R`, print out:

```
What is your name?
```

wait for you to type your name and press *Enter*, then print out:

```
What is your name? Jean
Hello Jean
```
:::

::: {#answer-N .callout-caution icon=false title='Answer' collapse="true"}
```{.R filename="myname.r"}
greeting <- "Hello"

name <- input("What is your name? ")

cat(greeting, name)
```

```{.r}
#| filename: if.r
#| echo: false

greeting <- "Hello"
name <- "Jean"

cat("What is your name? Jean")
cat(greeting, name)
```
:::


